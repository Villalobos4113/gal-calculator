/*************************************************************
*  Project  : 4-bit Calculator (Add, Sub, 3-bit Multiply)
*  Target   : GAL22V10
*  Tool     : WinCupl
*  Date     : 07-May-2025
*  Author   : ChatGPT (o3)
*------------------------------------------------------------
*  Function :  
*    O[1:0] = 00 or 11  →  A + B          (4-bit + carry)
*             01        →  A – B          (4-bit, 2-s-comp)
*             10        →  A[2:0] × B[2:0]  (6-bit)
*    - LED (PIN14) lights when subtraction is negative.
*    - Result placed on PIN[15:22] (22 = LSB, 15 = MSB).
*------------------------------------------------------------
*  Only basic WinCupl operators:  NOT, AND, OR, XOR
*************************************************************/

Name     CALC22V10 ;
PartNo   01 ;
Revision 01 ;
Date     07/05/25 ;
Designer ChatGPT ;
Device   g22v10 ;

/*====================  PIN MAP  ============================*/
/*---------  DATA INPUTS  ---------*/
PIN   2 = A0 ;          /* A[0] (LSB) */
PIN   3 = A1 ;
PIN   4 = A2 ;
PIN   5 = A3 ;          /* A[3] (MSB) */

PIN   6 = B0 ;          /* B[0] (LSB) */
PIN   7 = B1 ;
PIN   8 = B2 ;
PIN   9 = B3 ;          /* B[3] (MSB) */

/*---------  OP-CODE  ---------*/
PIN  10 = O0 ;          /* O[0] LSB */
PIN  11 = O1 ;          /* O[1] MSB */

/*---------  STATUS  ---------*/
PIN  14 = NEG ;         /* 1 = subtraction result is negative */

/*---------  RESULT BUS  (LSB = PIN22)  ---------*/
PIN  22 = R0 ;
PIN  21 = R1 ;
PIN  20 = R2 ;
PIN  19 = R3 ;
PIN  18 = R4 ;
PIN  17 = R5 ;
PIN  16 = R6 ;
PIN  15 = R7 ;          /* MSB (unused in this design) */

/*===========================================================*/
/*==========  CONTROL DECODE  ===============================*/
ADD = (NOT O1 AND NOT O0)            /* 00 */
    OR ( O1 AND  O0) ;               /* 11 */

SUB = (NOT O1 AND  O0) ;             /* 01 */

MUL = ( O1 AND NOT O0) ;             /* 10 */

/* Wrapper for “is Add OR Sub” (true for + or –) */
ARITH = ADD OR SUB ;

/*===========================================================*/
/*==========  ADD / SUB (4-bit Ripple-Carry)  ===============*/
/* Two’s-complement trick:  if SUB=1, use B XOR 1  and start
 * with carry-in = 1 → effectively A + (~B + 1) = A – B
 */
B0S = B0 XOR SUB ;
B1S = B1 XOR SUB ;
B2S = B2 XOR SUB ;
B3S = B3 XOR SUB ;

C0  = SUB ;                           /* initial carry / borrow */

S0  = A0 XOR B0S XOR C0 ;             /* bit 0 sum */
C1  = (A0 AND B0S) OR (A0 AND C0) OR (B0S AND C0) ;

S1  = A1 XOR B1S XOR C1 ;             /* bit 1 sum */
C2  = (A1 AND B1S) OR (A1 AND C1) OR (B1S AND C1) ;

S2  = A2 XOR B2S XOR C2 ;             /* bit 2 sum */
C3  = (A2 AND B2S) OR (A2 AND C2) OR (B2S AND C2) ;

S3  = A3 XOR B3S XOR C3 ;             /* bit 3 sum */
C4  = (A3 AND B3S) OR (A3 AND C3) OR (B3S AND C3) ; /* bit 4 */

/* Negative indicator: MSB of two’s-complement result */
NEG = SUB AND C4 ;

/*===========================================================*/
/*==========  3-bit × 3-bit MULTIPLIER  =====================*/
/* Partial products */
PP00 = A0 AND B0 ;
PP01 = A1 AND B0 ;
PP02 = A2 AND B0 ;

PP10 = A0 AND B1 ;
PP11 = A1 AND B1 ;
PP12 = A2 AND B1 ;

PP20 = A0 AND B2 ;
PP21 = A1 AND B2 ;
PP22 = A2 AND B2 ;

/* -----  Bit 0  -----*/
P0   = PP00 ;                                 /* R0 */

/* -----  Bit 1  -----*/
P1   = PP01 XOR PP10 ;
C1M  = PP01 AND PP10 ;                        /* carry to bit2 */

/* -----  Bit 2  -----*/
T2   = PP02 XOR PP11 XOR PP20 ;
C2A  = (PP02 AND PP11) OR (PP02 AND PP20) OR (PP11 AND PP20) ;
P2   = T2 XOR C1M ;
C2B  = T2 AND C1M ;
C2   = C2A OR C2B ;                           /* carry to bit3 */

/* -----  Bit 3  -----*/
P3   = PP12 XOR PP21 XOR C2 ;
C3   = (PP12 AND PP21) OR (PP12 AND C2) OR (PP21 AND C2) ;

/* -----  Bit 4  -----*/
P4   = PP22 XOR C3 ;
C4M  = PP22 AND C3 ;

/* -----  Bit 5 (MSB) -----*/
P5   = C4M ;

/* Unused upper bits (always 0) */
P6   = 0 ;
P7   = 0 ;

/*===========================================================*/
/*==========  RESULT MULTIPLEXER (Add/Sub vs Mul)  ==========*/
R0 = (ARITH AND S0)  OR (MUL AND P0) ;
R1 = (ARITH AND S1)  OR (MUL AND P1) ;
R2 = (ARITH AND S2)  OR (MUL AND P2) ;
R3 = (ARITH AND S3)  OR (MUL AND P3) ;
R4 = (ARITH AND C4)  OR (MUL AND P4) ;   /* bit 4 */
R5 = (ARITH AND 0)   OR (MUL AND P5) ;   /* bit 5 (only for mult) */
R6 = (ARITH AND 0)   OR (MUL AND P6) ;   /* constant 0 otherwise */
R7 = (ARITH AND 0)   OR (MUL AND P7) ;   /* constant 0 otherwise */

/*====================  END OF FILE  ========================*/